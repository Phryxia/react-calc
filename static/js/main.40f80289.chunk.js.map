{"version":3,"sources":["calculator.tsx","CalcButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Opr","CalcButton","props","id","onClick","name","Calculator","useState","showHi","setShowHi","hiValue","setHiValue","curNum","setCurNum","ADD","opr","setOpr","operate","a","b","SUB","MUL","DIV","generateOnNumber","s","generateOnOpr","parseFloat","className","length","substring","PASS","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40f80289.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport CalcButton from './CalcButton';\r\n\r\nenum Opr {\r\n\tADD = '+', \r\n\tSUB = '-', \r\n\tMUL = '×', \r\n\tDIV = '÷', \r\n\tPASS = ''\r\n};\r\n\r\ninterface CalculatorProps {\r\n\tname?: string;\r\n};\r\n\r\nconst Calculator = (props : CalculatorProps) => {\r\n\tconst [showHi, setShowHi] = useState<Boolean>(false);\r\n\tconst [hiValue, setHiValue] = useState<number>(0);\r\n\r\n\t/*\r\n\t\t현재 입력된 숫자의 문자열 표현\r\n\t*/\r\n\tconst [curNum, setCurNum] = useState<string>('0');\r\n\r\n\t/*\r\n\t\t현재 연산자\r\n\t*/\r\n\tconst [opr, setOpr] = useState<Opr>(Opr.ADD);\r\n\r\n\t/*\r\n\t\t현재 연산자 상태에 맞는 연산을 하여 결과를 반환한다.\r\n\t\t만약 연산자 지정이 안 되어있으면 b를 반환한다.\r\n\t*/\r\n\tconst operate = (a: number, b: number) => {\r\n\t\tif (opr === Opr.ADD)\r\n\t\t\treturn a + b;\r\n\t\telse if (opr === Opr.SUB)\r\n\t\t\treturn a - b;\r\n\t\telse if (opr === Opr.MUL)\r\n\t\t\treturn a * b;\r\n\t\telse if (opr === Opr.DIV)\r\n\t\t\treturn a / b;\r\n\t\telse\r\n\t\t\treturn b;\r\n\t};\r\n\r\n\t/*\r\n\t\t현재 입력 중인 숫자에 새로운 숫자를 더한다.\r\n\t*/\r\n\tconst generateOnNumber = (s: string) => {\r\n\t\treturn () => {\r\n\t\t\tif (curNum === '0')\r\n\t\t\t\tsetCurNum(s);\r\n\t\t\telse\r\n\t\t\t\tsetCurNum(curNum + s);\r\n\t\t};\r\n\t};\r\n\r\n\t/*\r\n\t\t현재 입력 중인 숫자가 정수면 점을 찍는다.\r\n\t*/\r\n\tconst onPressDot = () => {\r\n\t\tif (!curNum.includes('.'))\r\n\t\t\tsetCurNum(curNum + '.');\r\n\t};\r\n\t\r\n\t/*\r\n\t\t현재 입력 중인 숫자의 맨 마지막 자리를 지운다.\r\n\t*/\r\n\tconst onPressErase = () => {\r\n\t\tif (curNum.length > 1)\r\n\t\t\tsetCurNum(curNum.substring(0, curNum.length - 1));\r\n\t\telse\r\n\t\t\tsetCurNum('0');\r\n\t};\r\n\r\n\t/*\r\n\t\t현재 입력 중인 숫자를 임시값에 반영하고\r\n\t\t연산모드를 변경하며 새로운 숫자를 입력할\r\n\t\t준비를 한다.\r\n\t*/\r\n\tconst generateOnOpr = (s: Opr) => {\r\n\t\treturn () => {\r\n\t\t\tsetShowHi(true);\r\n\t\t\tsetHiValue(operate(hiValue, parseFloat(curNum)));\r\n\t\t\tsetOpr(s);\r\n\t\t\tsetCurNum('0');\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\t현재 입력 중인 숫자와 임시값을 모두 초기화한다.\r\n\t*/\r\n\tconst onPressClear = () => {\r\n\t\tsetShowHi(false);\r\n\t\tsetHiValue(0);\r\n\t\tsetOpr(Opr.PASS);\r\n\t\tsetCurNum('0');\r\n\t};\r\n\r\n\t/*\r\n\t\t= 기호를 눌렀을 때 일로, 연산 결과를 현재 값으로 보여준다.\r\n\t*/\r\n\tconst onPressAssign = () => {\r\n\t\tsetShowHi(false);\r\n\t\tif (opr !== Opr.PASS) {\r\n\t\t\tsetCurNum('' + operate(hiValue, parseFloat(curNum)));\r\n\t\t}\r\n\t\tsetOpr(Opr.PASS);\r\n\t\tsetHiValue(0);\r\n\t};\r\n\r\n\t/*\r\n\t\tRENDERING\r\n\t*/\r\n\treturn (\r\n\t\t<div className='calculator'>\r\n\t\t  {/* DISPLAY */}\r\n\t\t  <div className='displayer'>\r\n\t\t  \t<div className='displayerHi'>\r\n\t\t  \t  <span className='hiValue'>{showHi ? hiValue : ''}</span>\r\n\t\t  \t</div>\r\n\t\t  \t<div className='displayerLo'>\r\n\t\t\t  <span className='opr'>{showHi ? opr : ''}</span>\r\n\t\t  \t  <span className='loValue'>{curNum}</span>\r\n\t\t  \t</div>\r\n\t\t  </div>\r\n\t\t  <div className='buttons'>\r\n\t\t  {/* BUTTONS LIEN 1*/}\r\n\t\t  <div>\r\n\t\t  \t<CalcButton name='7' onClick={generateOnNumber('7')} />\r\n\t\t  \t<CalcButton name='8' onClick={generateOnNumber('8')} />\r\n\t\t  \t<CalcButton name='9' onClick={generateOnNumber('9')} />\r\n\t\t  \t<CalcButton name='→' onClick={onPressErase} />\r\n\t\t  \t<CalcButton name='C' onClick={onPressClear} />\r\n\t\t  </div>\r\n\t\t  {/* BUTTONS LIEN 2*/}\r\n\t\t  <div>\r\n\t\t  \t<CalcButton name='4' onClick={generateOnNumber('4')} />\r\n\t\t  \t<CalcButton name='5' onClick={generateOnNumber('5')} />\r\n\t\t  \t<CalcButton name='6' onClick={generateOnNumber('6')} />\r\n\t\t  \t<CalcButton name='+' onClick={generateOnOpr(Opr.ADD)} />\r\n\t\t  \t<CalcButton name='-' onClick={generateOnOpr(Opr.SUB)} />\r\n\t\t  </div>\r\n\t\t  {/* BUTTONS LIEN 3*/}\r\n\t\t  <div>\r\n\t\t  \t<CalcButton name='1' onClick={generateOnNumber('1')} />\r\n\t\t  \t<CalcButton name='2' onClick={generateOnNumber('2')} />\r\n\t\t  \t<CalcButton name='3' onClick={generateOnNumber('3')} />\r\n\t\t  \t<CalcButton name='×' onClick={generateOnOpr(Opr.MUL)} />\r\n\t\t  \t<CalcButton name='÷' onClick={generateOnOpr(Opr.DIV)} />\r\n\t\t  </div>\r\n\t\t  {/* BUTTONS LIEN 4*/}\r\n\t\t  <div>\r\n\t\t  \t<CalcButton name='0' id='bt0' onClick={generateOnNumber('0')} />\r\n\t\t  \t<CalcButton name='.' id='btdt' onClick={onPressDot} />\r\n\t\t  \t<CalcButton name='=' id='bteq' onClick={onPressAssign }/>\r\n\t\t  </div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\ninterface CalcButtonProps {\r\n\tname: string;\r\n\tid?: string;\r\n\tonClick?: () => void;\r\n};\r\n\r\nconst CalcButton = (props : CalcButtonProps) => {\r\n\treturn (\r\n\t\t<button id={props.id} onClick={props.onClick}>{props.name}</button>\r\n\t);\r\n};\r\n\r\nexport default CalcButton;","import React from 'react';\nimport Calculator from './calculator';\nimport './App.css';\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t  <Calculator />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}